import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram import F
import asyncio
from datetime import datetime, time, timedelta, timezone
import random, uuid, requests

def tranfer(user_id, asset, amount):
    spend_id = str(uuid.uuid4())
    headers = {
        "Crypto-Pay-API-Token":"",
        "Content-Type":"application/json"
    }
    data = {
        "user_id":user_id,
        "asset":asset,
        "amount":amount,
        "spend_id":spend_id
    }
    respose = requests.post("https://pay.crypt.bot/api/transfer", headers=headers, json=data)
    print(respose.json)
    return respose.json

def get_invoices():
    invoices = []
    headers = {
        "Crypto-Pay-API-Token":"",
        "Content-Type":"application/json"
    }

    requests_data = requests.post('https://pay.crypt.bot/api/getInvoices', headers=headers)


    if len(invoices)==0:

        for item in requests_data.json().get('result').get('items'):

            invoice_id = item.get('invoice_id')
            invoice_url = item.get('pay_url')
            invoice_status = item.get('status')
            invoice_userId =  # –° –±–æ—Ç–∞ –±–µ—Ä–µ–º –∞–π–¥–∏—à–Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            invoice_data = {
                'invoice_id':invoice_id,
                'invoice_userId':invoice_userId, #invoice_id –ø—Ä–∏–≤—è–∑–∞–Ω –∫ invoice_user
                'invoice_url':invoice_url,
                'invoice_status':invoice_status
            }
            invoices.append(invoice_data)
    else:
        for item in requests_data.json().get('result').get('items'):

            invoice_id = item.get('invoice_id')
            invoice_url = item.get('pay_url')
            invoice_status = item.get('status')
            invoice_userId =  # –° –±–æ—Ç–∞ –±–µ—Ä–µ–º –∞–π–¥–∏—à–Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            invoice_data = {
                'invoice_id':invoice_id,
                'invoice_userId':invoice_userId, #invoice_id –ø—Ä–∏–≤—è–∑–∞–Ω –∫ invoice_user
                'invoice_url':invoice_url,
                'invoice_status':invoice_status
            }
            invoices.append(invoice_data)


        # while item.get('invoice_id') != invoices
    return invoices

def create_invoices(asset, amount, invoice_userId):
    headers = {
        "Crypto-Pay-API-Token":"",
    }
    data = {
        "asset":asset,
        "amount": amount
    }
    requests_data = requests.post('https://pay.crypt.bot/api/createInvoice', headers=headers, data=data)
    invoice_id = requests_data.json().get('result').get('invoice_id')
    invoice_url = requests_data.json().get('result').get('pay_url')

    invoice_data = {
        'invoice_id':invoice_id,
        'invoice_userId':invoice_userId, #invoice_id –ø—Ä–∏–≤—è–∑–∞–Ω –∫ invoice_user
        'invoice_url':invoice_url,

    }

    return invoice_data



moscow_tz = timezone(timedelta(hours=3))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ ID —á–∞—Ç–æ–≤
BOT_TOKEN = ""
ADMIN_CHAT_ID = ...   # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
GROUP_CHAT_ID = ... # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –≥—Ä—É–ø–ø—ã

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —á–∏—Å–µ–ª
user_data = {}
selected_numbers = set()
invoice_data = {}
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Å—Ç–∞–≤–æ–∫



def is_bet_time():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫."""

    now = datetime.now(timezone(timedelta(hours=3))).time()
    return time(9, 0) <= now <= time(22, 0)

# –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ –ø–µ—Ä–µ—á–µ—Ä–∫–Ω—É—Ç—É—é –≤–µ—Ä—Å–∏—é
def strike(text):
    result = ""
    for c in text:
        result = result + c + "\u0336"
    return result
def main_kb():
    kb_list = [
        [KeyboardButton(text="/start" )],
        [KeyboardButton(text="/choose")],
        [KeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É")]
    ]

    keyboard = ReplyKeyboardMarkup(keyboard=kb_list, resize_keyboard=True)
    return keyboard

async def check_pay(message: types.Message, pay_link):
    import time
    import asyncio

    global user_data
    start_time = time.time() 
    while time.time() - start_time < 60: 

        if not invoice_data:
            await asyncio.sleep(2) 
            continue


        for invoice in get_invoices():
            if invoice.get('invoice_id') == invoice_data.get('invoice_id'):
                if invoice.get('invoice_status') == "paid":
                    user_id = message.from_user.id
                    user_data[user_id] = user_data.get(user_id, {})
                    user_data[user_id]["payment_confirmed"] = True

                    invoice_data.clear()
                    keyboard = generate_numbers_keyboard()
                    await bot.edit_message_text(
                        text="–í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ:",
                        chat_id=pay_link.chat.id,
                        message_id=pay_link.message_id,
                        reply_markup=keyboard
                    )
                    return  

        await asyncio.sleep(4) 


    invoice_data.clear()
    await bot.edit_message_text('–í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø–ª–∞—Ç—ë–∂, /start',chat_id=pay_link.chat.id,message_id=pay_link.message_id)


def generate_numbers_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —á–∏—Å–ª–∞–º–∏ –æ—Ç 1 –¥–æ 100, —Ä–∞–∑–±–∏–≤–∞—è –∏—Ö –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ 10 —á–∏—Å–µ–ª."""
    buttons = []
    for row_start in range(1, 101, 8):  # –ß–∏—Å–ª–∞ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 1 –¥–æ 100
        row_buttons = [
            InlineKeyboardButton(
                text="‚ùå" if num in selected_numbers else str(num),
                callback_data=f"number_{num}" if num not in selected_numbers else "disabled",
            )
            for num in range(row_start, row_start + 8)
            if num <= 100
        ]
        buttons.append(row_buttons)
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard




# –•–µ–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def start_command_handler(message: types.Message):

    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start."""
    global invoice_data    
    user_id = message.from_user.id
    if not is_bet_time():
        await message.answer("–°—Ç–∞–≤–∫–∏ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Å 10:00 –¥–æ 21:00 –ø–æ –ú–æ—Å–∫–≤–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!")
    else:
        if  invoice_data:
            send_message = await message.answer("–í—ã –±–æ–ª—å—à–µ –Ω–µ –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–ª–∞—Ç–µ–∂–∏ –æ–ø–ª–∞—Ç–∏—Ç–µ —Å–≤–æ–π –≤ —Ç–µ—á–µ–Ω–∏–∏ 60 —Å–µ–∫—É–Ω–¥")
            await asyncio.sleep(4)
            await message.delete()
            await bot.delete_message(chat_id=send_message.chat.id,message_id=send_message.message_id)
        elif user_id  in user_data:
            if "selected_number" in user_data[user_id] or "payment_confirmed" in user_data[user_id]:
                await message.answer("–í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ —á–∏—Å–ª–æ –æ–∂–∏–¥–∞–π—Ç–µ –∫–æ–Ω—Ü–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–∞")
        else:
            await message.answer(
                "üé∞ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É '–î–∂–µ–∫–ø–æ—Ç –∫–∞–∂–¥—ã–π –¥–µ–Ω—å'! üéâ\n\n"
                "üíµ –°–¥–µ–ª–∞–π —Å—Ç–∞–≤–∫—É, —É–≥–∞–¥–∞–π —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100 –∏ –ø–æ–ª—É—á–∏ —à–∞–Ω—Å –∑–∞–±—Ä–∞—Ç—å 70% –æ—Ç –≤—Å–µ—Ö —Å—Ç–∞–≤–æ–∫!\n\n"
                "üëâ –ß—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É –Ω—É–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å 1 USDT.\n"
                "‚úÖ –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—ã —Å–º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å —á–∏—Å–ª–æ –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ!\n\n"
                "üõ† –ö–æ–º–∞–Ω–¥—ã:\n"

                "/choose - –í—ã–±—Ä–∞—Ç—å —á–∏—Å–ª–æ"
            )
            invoice_data = create_invoices("TON",1,message.from_user.id)              
            pay_link_message = await message.answer(f" –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–ª–∞—Ç–µ–∂ {invoice_data.get('invoice_url')}\n . –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—å—Å—è –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥. –í—ã –º–æ–∂–µ—Ç–µ")
            asyncio.create_task(check_pay(message, pay_link_message)) 

    print(invoice_data)




    


       



# –•–µ–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥—ã /choose


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –æ–ø–ª–∞—Ç—ã
 

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ —á–∏—Å–ª–∞
@dp.callback_query(lambda callback: callback.data.startswith("number_"))
async def number_selection_handler(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —á–∏—Å–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."""
    user_id = callback.from_user.id
    selected_number = int(callback.data.split("_")[1])

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–±—Ä–∞–Ω–æ –ª–∏ —É–∂–µ —ç—Ç–æ —á–∏—Å–ª–æ
    if selected_number in selected_numbers:
        await callback.answer(f"–≠—Ç–æ —á–∏—Å–ª–æ —É–∂–µ –≤—ã–±—Ä–∞–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ.", show_alert=True)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–±—Ä–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —á–∏—Å–ª–æ
    if user_id in user_data and "selected_number" in user_data[user_id]:
        await callback.answer("–í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ —á–∏—Å–ª–æ. –ò–∑–º–µ–Ω–∏—Ç—å –≤—ã–±–æ—Ä –Ω–µ–ª—å–∑—è.", show_alert=True)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data[user_id]["selected_number"] = selected_number
    user_data[user_id]["username"] = callback.from_user.username or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    selected_numbers.add(selected_number)

    keyboard = generate_numbers_keyboard()
    await callback.message.edit_reply_markup(reply_markup=keyboard)
    await callback.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —á–∏—Å–ª–æ {selected_number}. –£–¥–∞—á–∏!")
    await callback.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —á–∏—Å–ª–æ {selected_number}. –£–¥–∞—á–∏!")




# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã



# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–æ–∑—ã–≥—Ä—ã—à (–ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ 22:00 –µ–∂–µ–¥–Ω–µ–≤–Ω–æ)
async def daily_draw():
    """–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à –≤ 22:00."""
    global user_data, selected_numbers, invoice_data
    while True:
        now = datetime.now(timezone(timedelta(hours=3)))
        target_time = datetime.combine(now.date(), time(21, 00)).replace(tzinfo=moscow_tz)  
        if now > target_time:
            target_time += timedelta(days=1)
        sleep_duration = (target_time - now).total_seconds()
        await asyncio.sleep(sleep_duration)

        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ—Ö, –∫—Ç–æ –≤—ã–±—Ä–∞–ª —á–∏—Å–ª–æ
        eligible_users = [
            user_id 
            for user_id, data in user_data.items() 
            if data.get("selected_number") is not None
        ]

        if eligible_users:
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –∏–∑ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö
            winner_id = random.choice(eligible_users)
            winner_info = f"@{user_data[winner_id].get('username', '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')} ({winner_id})"
            prize_amount = len(user_data)*0.7
            prize_amount_text = f"70% –æ—Ç –≤—Å–µ—Ö —Å—Ç–∞–≤–æ–∫ —ç—Ç–æ {prize_amount}"

            print(user_data)
            print(winner_id)
            # –û–ø–æ–≤–µ—â–µ–Ω–∏–µ
            tranfer(winner_id, "TON", len(user_data)*0.7)
            await bot.send_message(winner_id, f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {prize_amount_text}! üèÜ, –ö–æ–ª –≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ {prize_amount} ")
            await bot.send_message(GROUP_CHAT_ID, f"üéä –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {winner_info}. –ü—Ä–∏–∑: {prize_amount_text}")
            await bot.send_message(ADMIN_CHAT_ID, f"–†–æ–∑—ã–≥—Ä—ã—à –∑–∞–≤–µ—Ä—à–µ–Ω. –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {winner_info}")



            # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            user_data = {}
            selected_numbers.clear()
            invoice_data.clear()
            await bot.send_message(GROUP_CHAT_ID, "–†–æ–∑—ã–≥—Ä—ã—à –∑–∞–≤–µ—Ä—à–µ–Ω. –°–¥–µ–ª–∞–π—Ç–µ –Ω–æ–≤—É—é —Å—Ç–∞–≤–∫—É –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Å–ª–µ–¥—É—é—â–µ–º!")
        else:
            await bot.send_message(ADMIN_CHAT_ID, "–†–æ–∑—ã–≥—Ä—ã—à –∑–∞–≤–µ—Ä—à–µ–Ω, –Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–µ –±—ã–ª–æ.")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞
async def main():
    asyncio.create_task(daily_draw())


    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
